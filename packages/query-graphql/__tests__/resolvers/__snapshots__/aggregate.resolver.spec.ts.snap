// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AggregateResolver should create a AggregateResolver for the DTO 1`] = `
"type TestResolverDTO {
  id: ID!
  stringField: String!
}

type TestResolverDTOAggregateGroupBy {
  id: ID
  stringField: String
}

type TestResolverDTOCountAggregate {
  id: Int
  stringField: Int
}

type TestResolverDTOMinMaxAggregate {
  id: ID
  stringField: String
}

type TestResolverDTOAggregateResponse {
  groupBy: TestResolverDTOAggregateGroupBy
  count: TestResolverDTOCountAggregate
  distinctCount: TestResolverDTOCountAggregate
  min: TestResolverDTOMinMaxAggregate
  max: TestResolverDTOMinMaxAggregate
}

\\"\\"\\"Cursor for paging through collections\\"\\"\\"
scalar ConnectionCursor

\\"\\"\\"
Relative date, an Epoch time (number), ISO Date string or a relative date value in the form of \\"last-[N]-[minutes | hours | days | weeks | months | years]\\"
\\"\\"\\"
scalar RelativeDate

type Query {
  testResolverDTOAggregate(
    \\"\\"\\"Filter to find records to aggregate on\\"\\"\\"
    filter: TestResolverDTOFilter

    \\"\\"\\"Limit the number of results group by aggregation can return\\"\\"\\"
    groupByLimit: Float
  ): [TestResolverDTOAggregateResponse!]!
  test: TestResolverDTO!
}

input TestResolverDTOFilter {
  freeTextQuery: String
  and: [TestResolverDTOFilter!]
  or: [TestResolverDTOFilter!]
  id: IDFilterComparison
  stringField: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
  contains: ID
  notContains: ID
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}"
`;

exports[`AggregateResolver should not expose read methods if not enabled 1`] = `
"type TestResolverDTO {
  id: ID!
  stringField: String!
}

\\"\\"\\"Cursor for paging through collections\\"\\"\\"
scalar ConnectionCursor

\\"\\"\\"
Relative date, an Epoch time (number), ISO Date string or a relative date value in the form of \\"last-[N]-[minutes | hours | days | weeks | months | years]\\"
\\"\\"\\"
scalar RelativeDate

type Query {
  test: TestResolverDTO!
}"
`;
