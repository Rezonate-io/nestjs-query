// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AggregateRelationsResolver aggregate should not add read methods if enableAggregate is not true new test 1`] = `
"type TestResolverDTO {
  id: ID!
  stringField: String!
  relationsAggregate(
    \\"\\"\\"Filter to find records to aggregate on\\"\\"\\"
    filter: TestRelationDTOFilter

    \\"\\"\\"Limit the number of results group by aggregation can return\\"\\"\\"
    groupByLimit: Float
  ): [TestResolverDTORelationsAggregateResponse!]!
  testsAggregate(
    \\"\\"\\"Filter to find records to aggregate on\\"\\"\\"
    filter: TestRelationDTOFilter

    \\"\\"\\"Limit the number of results group by aggregation can return\\"\\"\\"
    groupByLimit: Float
  ): [TestResolverDTOTestsAggregateResponse!]!
}

input TestRelationDTOFilter {
  freeTextQuery: String
  and: [TestRelationDTOFilter!]
  or: [TestRelationDTOFilter!]
  id: IDFilterComparison
  testResolverId: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
  contains: ID
  notContains: ID
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

type TestResolverDTORelationsAggregateGroupBy {
  id: ID
  testResolverId: String
}

type TestResolverDTORelationsCountAggregate {
  id: Int
  testResolverId: Int
}

type TestResolverDTORelationsMinMaxAggregate {
  id: ID
  testResolverId: String
}

type TestResolverDTORelationsAggregateResponse {
  groupBy: TestResolverDTORelationsAggregateGroupBy
  count: TestResolverDTORelationsCountAggregate
  distinctCount: TestResolverDTORelationsCountAggregate
  min: TestResolverDTORelationsMinMaxAggregate
  max: TestResolverDTORelationsMinMaxAggregate
}

type TestResolverDTOTestsAggregateGroupBy {
  id: ID
  testResolverId: String
}

type TestResolverDTOTestsCountAggregate {
  id: Int
  testResolverId: Int
}

type TestResolverDTOTestsMinMaxAggregate {
  id: ID
  testResolverId: String
}

type TestResolverDTOTestsAggregateResponse {
  groupBy: TestResolverDTOTestsAggregateGroupBy
  count: TestResolverDTOTestsCountAggregate
  distinctCount: TestResolverDTOTestsCountAggregate
  min: TestResolverDTOTestsMinMaxAggregate
  max: TestResolverDTOTestsMinMaxAggregate
}

\\"\\"\\"Cursor for paging through collections\\"\\"\\"
scalar ConnectionCursor

\\"\\"\\"
Relative date, an Epoch time (number), ISO Date string or a relative date value in the form of \\"last-[N]-[minutes | hours | days | weeks | months | years]\\"
\\"\\"\\"
scalar RelativeDate

type Query {
  test: TestResolverDTO!
}"
`;

exports[`AggregateRelationsResolver aggregate should use the dtoName if provided new test 1`] = `
"type TestResolverDTO {
  id: ID!
  stringField: String!
  relationsAggregate(
    \\"\\"\\"Filter to find records to aggregate on\\"\\"\\"
    filter: TestRelationDTOFilter

    \\"\\"\\"Limit the number of results group by aggregation can return\\"\\"\\"
    groupByLimit: Float
  ): [TestResolverDTORelationsAggregateResponse!]!
  testsAggregate(
    \\"\\"\\"Filter to find records to aggregate on\\"\\"\\"
    filter: TestRelationDTOFilter

    \\"\\"\\"Limit the number of results group by aggregation can return\\"\\"\\"
    groupByLimit: Float
  ): [TestResolverDTOTestsAggregateResponse!]!
}

input TestRelationDTOFilter {
  freeTextQuery: String
  and: [TestRelationDTOFilter!]
  or: [TestRelationDTOFilter!]
  id: IDFilterComparison
  testResolverId: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
  contains: ID
  notContains: ID
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

type TestResolverDTORelationsAggregateGroupBy {
  id: ID
  testResolverId: String
}

type TestResolverDTORelationsCountAggregate {
  id: Int
  testResolverId: Int
}

type TestResolverDTORelationsMinMaxAggregate {
  id: ID
  testResolverId: String
}

type TestResolverDTORelationsAggregateResponse {
  groupBy: TestResolverDTORelationsAggregateGroupBy
  count: TestResolverDTORelationsCountAggregate
  distinctCount: TestResolverDTORelationsCountAggregate
  min: TestResolverDTORelationsMinMaxAggregate
  max: TestResolverDTORelationsMinMaxAggregate
}

type TestResolverDTOTestsAggregateGroupBy {
  id: ID
  testResolverId: String
}

type TestResolverDTOTestsCountAggregate {
  id: Int
  testResolverId: Int
}

type TestResolverDTOTestsMinMaxAggregate {
  id: ID
  testResolverId: String
}

type TestResolverDTOTestsAggregateResponse {
  groupBy: TestResolverDTOTestsAggregateGroupBy
  count: TestResolverDTOTestsCountAggregate
  distinctCount: TestResolverDTOTestsCountAggregate
  min: TestResolverDTOTestsMinMaxAggregate
  max: TestResolverDTOTestsMinMaxAggregate
}

\\"\\"\\"Cursor for paging through collections\\"\\"\\"
scalar ConnectionCursor

\\"\\"\\"
Relative date, an Epoch time (number), ISO Date string or a relative date value in the form of \\"last-[N]-[minutes | hours | days | weeks | months | years]\\"
\\"\\"\\"
scalar RelativeDate

type Query {
  test: TestResolverDTO!
}"
`;

exports[`AggregateRelationsResolver aggregate should use the object type name 1`] = `
"type TestResolverDTO {
  id: ID!
  stringField: String!
  relationsAggregate(
    \\"\\"\\"Filter to find records to aggregate on\\"\\"\\"
    filter: TestRelationDTOFilter

    \\"\\"\\"Limit the number of results group by aggregation can return\\"\\"\\"
    groupByLimit: Float
  ): [TestResolverDTORelationsAggregateResponse!]!
}

input TestRelationDTOFilter {
  freeTextQuery: String
  and: [TestRelationDTOFilter!]
  or: [TestRelationDTOFilter!]
  id: IDFilterComparison
  testResolverId: StringFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
  contains: ID
  notContains: ID
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
}

type TestResolverDTORelationsAggregateGroupBy {
  id: ID
  testResolverId: String
}

type TestResolverDTORelationsCountAggregate {
  id: Int
  testResolverId: Int
}

type TestResolverDTORelationsMinMaxAggregate {
  id: ID
  testResolverId: String
}

type TestResolverDTORelationsAggregateResponse {
  groupBy: TestResolverDTORelationsAggregateGroupBy
  count: TestResolverDTORelationsCountAggregate
  distinctCount: TestResolverDTORelationsCountAggregate
  min: TestResolverDTORelationsMinMaxAggregate
  max: TestResolverDTORelationsMinMaxAggregate
}

\\"\\"\\"Cursor for paging through collections\\"\\"\\"
scalar ConnectionCursor

\\"\\"\\"
Relative date, an Epoch time (number), ISO Date string or a relative date value in the form of \\"last-[N]-[minutes | hours | days | weeks | months | years]\\"
\\"\\"\\"
scalar RelativeDate

type Query {
  test: TestResolverDTO!
}"
`;

exports[`AggregateRelationsResolver should not add read methods if one and many are empty 1`] = `
"type TestResolverDTO {
  id: ID!
  stringField: String!
}

\\"\\"\\"Cursor for paging through collections\\"\\"\\"
scalar ConnectionCursor

\\"\\"\\"
Relative date, an Epoch time (number), ISO Date string or a relative date value in the form of \\"last-[N]-[minutes | hours | days | weeks | months | years]\\"
\\"\\"\\"
scalar RelativeDate

type Query {
  test: TestResolverDTO!
}"
`;
